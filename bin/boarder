#!/usr/bin/env node

const inquirer = require('inquirer');
const chalk = require('chalk');
const shelljs = require('shelljs');
const ora = require('ora');
const fs = require('fs');

const baseConfig = {
  projectName: 'webpack-demo'
};

const argv = require('yargs')
  .alias('h', 'help')
  .alias('-v', '--version')
  .alias('-V', '--version')
  .usage('Usage: $0 init')
  .command(
    'init',
    chalk.underline('init base on webpack demo'),
    yargs => {

    },
    argv => {
      init()
    }
  )
  .example('$0 init')
  .demandCommand(1, chalk.magenta('You need init command before moving on'))
  .argv;

async function init() {
  const config = {};
  inquirer.prompt([{
    type: 'input',
    name: 'projectName',
    default: 'webpack-demo',
    message: 'project name?',
  }]).then(answers => {
    Object.assign(baseConfig, answers)
    create(baseConfig)
  });

}

async function create(config) {
  const spinner = ora('Loading init project').start();

  const npmAddr = shelljs.exec('npm config get prefix', {
    silent: true
  }).stdout.replace(/\n/g, '');
  shelljs.rm('-rf', config.projectName);
  shelljs.mkdir('-p', config.projectName)
  shelljs.cp('-r', [npmAddr + '/lib/node_modules/boarder/template/*'], config.projectName)

  spinner.text = 'Loading install dependencies';

  await writePackageJson(config.projectName)

  shelljs.cd(config.projectName)
  shelljs.exec('npm install', {
    silent: true
  })
  spinner.succeed('init successful ！！！')
  spinner.stop()
}

async function writePackageJson(name) {
  await new Promise((resolve, reject) => {
    fs.writeFile(`${name}/package.json`, `{
      "name": "${name}",
      "version": "0.0.1",
      "description": "${name} project",
      "main": "index.js",
      "scripts": {
        "test": "echo \\"Error: no test specified\\" && exit 1",
        "dev": "node build/webpack.dev.js",
        "build": "node build/webpack.build.js",
        "webpack-defaults": "webpack-defaults"
      },
      "engines": {
        "node": ">=4.0.0"
      },
      "devDependencies": {
        "autoprefixer": "^7.1.2",
        "babel-core": "^6.25.0",
        "babel-loader": "^7.1.1",
        "babel-plugin-transform-runtime": "^6.23.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-preset-stage-2": "^6.24.1",
        "bundle-buddy-webpack-plugin": "^0.2.1",
        "connect-history-api-fallback": "^1.3.0",
        "css-loader": "^0.28.4",
        "express": "^4.15.3",
        "extract-text-webpack-plugin": "^3.0.0",
        "file-loader": "^0.11.2",
        "html-loader": "^0.4.5",
        "html-webpack-inline-assets-plugin": "0.0.2",
        "html-webpack-plugin": "^2.29.0",
        "json-loader": "^0.5.4",
        "less": "^2.7.2",
        "less-loader": "^4.0.5",
        "node-sass": "^4.5.3",
        "opn": "^5.1.0",
        "ora": "^1.3.0",
        "postcss-loader": "^2.0.6",
        "rimraf": "^2.6.1",
        "sass-loader": "^6.0.6",
        "shelljs": "^0.7.8",
        "style-loader": "^0.18.2",
        "stylus": "^0.54.5",
        "stylus-loader": "^3.0.1",
        "uglifyjs-webpack-plugin": "^0.4.6",
        "url-loader": "^0.5.9",
        "webpack": "^3.2.0",
        "webpack-bundle-analyzer": "^2.8.3",
        "webpack-chunk-hash": "^0.4.0",
        "webpack-dev-middleware": "^1.11.0",
        "webpack-hot-middleware": "^2.18.2",
        "webpack-manifest-plugin": "^1.1.2",
        "webpack-merge": "^4.1.0"
      },
      "dependencies": {
        "babel-runtime": "^6.23.0"
      },
      "browserslist": [
        "> 1%",
        "last 2 versions",
        "not ie <= 8"
      ]
    }  
    `, 'utf8', (err, data) => {
      if (!err) resolve();
    });
  })
}